# Configuration file for /usr/sbin/buildkernel
# Make sure the below are set correctly for your system!

# following is the partuuid of your EFI system partition
# (e.g., the first partition on your USB boot key)
# replace with an appropriate value (find with lsblk and blkid) for your system
#EFIPARTUUID="2498f874-ad8f-484e-8aba-81ac1c9665b6"

# following is the partuuid of your LUKS partition (if on a GPT drive)
# (usually, this will be a partition of a fixed drive in your machine)
# replace with an appropriate value (find with lsblk and blkid) for your system
#CRYPTPARTUUID="8111286a-d24e-4ba2-b6af-d0650fab4130"

# if your LUKS filesystem is NOT on a GPT partition (for example, if it is
# on an MBR partition, or if you have luksFormat-ed a top-level drive, rather
# than a partition within it), then you must uncomment and set the following
# variable (use "ls -l /dev/disk/by-uuid" to locate the correct path)
# NB - most users will NOT need to do this (it is a special case), and
# should accordingly leave the variable commented out;
# note also that if you set CRYPTPATHMAP directly in this manner, the
# contents of CRYPTPARTUUID will be ignored
#CRYPTPATHMAP="/dev/disk/by-uuid/01234567-89ab-cdef-0123-456789abcdef"

# if your LUKS keyfile is not on your EFI system partition (for example,
# because you use a USB key to hold the keyfile, but have created an EFI
# system partition on the machine's main drive), then uncomment the below
# and replace the UUID with the appropriate value (find with lsblk and blkid)
# for your system; if you do not, then KEYFILEPARTUUID=EFIPARTUUID is assumed
#KEYFILEPARTUUID="8eca6e85-3f96-4117-b1f0-864576258c4f"

# if you wish to rely only on the fallback passphrase (assuming you have set
# one up) and no keyfile, uncomment the line below; otherwise
# the value "luks-key.gpg" will be assumed (if you do set LUKSKEYFILE to the
# empty string, KEYFILEPARTUUID is ignored)
#LUKSKEYFILE=""

# by default, buildkernel will build the kernel in /usr/src/linux. If
# LINUXBUILDDIR is specified, buildkernel will delete the contents of
# LINUXBUILDDIR/buildkernel, copy the contents of /usr/src/linux there,
# then build the kernel in that directory. This can be useful for sparing write
# cycles if /usr/src/linux is located on a SSD and the specified directory lies
# e.g. on tmpfs.
#LINUXBUILDDIR="/var/tmp"

# add any additional kernel command line parameters here (most critical ones
# will be set automatically by buildkernel; you can leave this commented out)
#ADDITIONALKERNELCMDS="root_trim=yes"

# by default, genkernel will be instructed to include all firmware and modules
# into the initramfs; uncomment and change the below (for example, to specify
# an empty string) if you do not want this, or if you want to manage these
# options explicitly through /etc/genkernel.conf
# (caution - may cause boot issues on some systems)
#ADDITIONALGENKERNELOPTS="--all-ramdisk-modules --firmware"

# by default, buildkernel will ensure that an EFI boot entry for any kernel
# it creates exists at the top of the EFI boot order (in EFI NVRAM);
# uncomment and change the below (to specify value 0) if you do not want to
# do this (for example, because you wish to use your own EFI bootloader)
#CREATEEFIBOOT=1

# set your keymap - this is IMPORTANT to ensure your password for the GPG
# protected keyfile gets read correctly
# if you leave this commented out, the "us" keymap will be used
#KEYMAP="jp"

# if you want a graphical boot theme, set it here; will automatically turn
# on the 'quiet splash' kernel options
# leave commented out for a textual boot screen
#PLYMOUTHTHEME="fade-in"

# if you want to use OpenRC init, rather than the default systemd, uncommment
# the below (capitalization is unimportant)
#INITSYSTEM="openrc"

# if you want to revert to the old (<=1.0.29) behaviour of _not_ compressing
# the built-in initramfs, uncomment the line below; XZ compression is now
# used by default; some systems will not boot large kernels that contain an
# uncompressed ramfs, even though the enclosing kernel is itself compressed
#COMPRESSINITRAMFS=0

# you can manually set the filesystem type for your root partition here.
# however, doing so should not be necessary.
#CMDLINE_ROOTFSTYPE="ext4"

# if you sign your kernel modules, configure the signing certificate and key
# paths to sign external modules as well once built. Setting the variables to
# "auto" will use the kernel's automatically generated certificate and key if
# you have configured it to generate them. By default the variable is unset and
# modules will not be signed.
#KERNEL_SIGNING_CERT="auto"
#KERNEL_SIGNING_KEY="auto"

# if you don't wish to enable suspend, uncomment below. Default is 0
# (Suspend enabled).
#DISABLE_SUSPEND=1

# if you don't wish to enable hibernation, uncomment below. Default is 0
# (Hibernation enabled).
#DISABLE_HIBERNATION=1

# if your configuration doesn't use LVM, uncomment below. Default is 0 (LVM
# enabled).
#DISABLE_LVM=1

# if you need to conform the config file for some reason, uncomment this
# hook function and fill it out to suit your requirements
# NB you should only really need to do this to override a setting forced
# by buildkernel itself; other changes you make during the make menuconfig step
# are persisted, and this is the preferred way to modify the config
user_conform_config_file() {
    CONFIG_Y=()
    
    # needed for our LUKS setup
    CONFIG_Y+=( CRYPTO_XTS )
    # needed for NVMe block devices
    CONFIG_Y+=( BLK_DEV_NVME )
    # Intel wireless wifi
    CONFIG_Y+=(
        IWLWIFI
        IWLMVM
    )
    # audio device
    CONFIG_Y+=(
        SND_HDA_INTEL
        SND_HDA_CODEC_REALTEK
        SND_HDA_CODEC_HDMI
    )
    set_kernel_config "SND_HDA_PREALLOC_SIZE" "2048"
    # video/webcam
    CONFIG_Y+=(
        MEDIA_CAMERA_SUPPORT
        MEDIA_SUPPORT
        MEDIA_USB_SUPPORT
        USB_CONFIGFS
        USB_CONFIGFS_F_UVC
        USB_F_UVC
        USB_GADGET
        USB_VIDEO_CLASS
        VIDEO_V4L2
    )
    # webcam audio
    CONFIG_Y+=( SND_USB_AUDIO )
    # Bluetooth
    CONFIG_Y+=(
        BT
        BT_BNEP
        BT_BNEP_MC_FILTER
        BT_BNEP_PROTO_FILTER
        BT_HCIBTUSB
        BT_HIDP
        BT_RFCOMM
        BT_RFCOMM_TTY
        CRYPTO_USER
        CRYPTO_USER_API_AEAD
    )
    # TUN network devices
    CONFIG_Y+=( TUN )

    # cgroup stuff (needed for Docker)
    CONFIG_Y+=(
        BLK_CGROUP
        CGROUP_CPUACCT
        CGROUP_DEVICE
        CGROUP_FREEZER
        CGROUP_HUGETLB
        CGROUP_NET_PRIO
        CGROUP_PERF
        CGROUP_PIDS
        CGROUP_SCHED
        CPUSETS
        MEMCG
        MEMCG_SWAP
        NET_CLS_CGROUP
        USER_NS
    )
    # networking stuff (needed for Docker)
    CONFIG_Y+=(
        BRIDGE
        BRIDGE_NETFILTER
        DUMMY
        IPVLAN
        IP_NF_NAT
        IP_NF_TARGET_MASQUERADE
        IP_VS
        IP_VS_NFCT
        IP_VS_PROTO_TCP
        IP_VS_PROTO_UDP
        IP_VS_RR
        MACVLAN
        NETFILTER_ADVANCED
        NETFILTER_XT_MATCH_ADDRTYPE
        NETFILTER_XT_MATCH_COMMENT
        NETFILTER_XT_MATCH_CONNTRACK
        NETFILTER_XT_MATCH_HL
        NETFILTER_XT_MATCH_IPVS
        NETFILTER_XT_MATCH_LIMIT
        NETFILTER_XT_MATCH_MULTIPORT
        NETFILTER_XT_MATCH_RECENT
        NF_NAT
        VETH
        VXLAN
    )
    # other stuff for Docker
    CONFIG_Y+=(
        BLK_DEV_THROTTLING
        CFS_BANDWIDTH
        DM_THIN_PROVISIONING
        FAIR_GROUP_SCHED
        OVERLAY_FS
        RT_GROUP_SCHED
    )

    # Filesystems
    CONFIG_Y+=(
        CIFS
        FUSE_FS
        NTFS_FS
        UDF_FS
        VFAT_FS
    )

    # required for ell for Bluez
    CONFIG_Y+=( KEY_DH_OPERATIONS )

    # AppArmor
    CONFIG_Y+=(
        DEFAULT_SECURITY_APPARMOR
        SECURITY_APPARMOR
    )
    unset_kernel_config "SECURITY_SELINUX"

    case "$(hostname)" in
    calculon) # personal Thinkpad
        # Thinkpad stuff
        CONFIG_Y+=( THINKPAD_ACPI THINKPAD_ACPI_ALSA_SUPPORT THINKPAD_ACPI_HOTKEY_POLL )
        ;;
    boxy) # work laptop 1
        CONFIG_Y+=( DRM DRM_I915 )
        ;;
    esac
    
    echo um "${CONFIG_Y[@]}"
    CONFIGS="${CONFIG_Y[@]}"
    for cfg in ${CONFIG_Y[@]}; do
        set_kernel_config "$cfg" "y"
    done

    make olddefconfig

    for cfg in ${CONFIG_Y[@]}; do
      if ! grep -q "^CONFIG_${cfg}=y" .config
      then
          echo "${RED_TEXT}ERROR!!${RESET_ATTS} $cfg requested Y, not set after olddefconfig" 
      fi
    done

}

# if you need to modify the initramfs during the buildkernel process, 
# uncomment this hook function and fill it out to suit your requirements
# user_modify_initramfs() {
#     # do stuff with ${INITRAMFSDIR} directory contents;
#     # the cpio archive is already unpacked here upon function entry
#     # and will be repacked again automatically for you afterwards
# }

# leave the below two lines commented out, unless running on a *very*
# badly-behaved UEFI BIOS, that looks only at the Microsoft boot loader path
#EFIBOOTFILE="bootmgfw.efi"
#EFIBOOTDIR="/EFI/Microsoft/Boot"

case "$(hostname)" in
calculon) # personal Thinkpad
    EFIPARTUUID="c015178e-042d-4a84-bb1f-5b356af36720"
    CRYPTPARTUUID="1af154dc-8dff-40ea-a6d1-d511083813c8"
    ;;
boxy) # DBX work laptop
    EFIPARTUUID="955c283d-80c3-4943-9150-28a7fb5a17ea"
    CRYPTPARTUUID="45c6f935-01a2-4584-9e42-a0d6fe2386b7"
    ;;
esac

# Automatically added by buildkernel - edits here may be overwritten
LUKSKEYFILE=""
INITSYSTEM="openrc"
# End of automatically added section
